{"version":3,"sources":["providers/LoadingProvider.tsx","components/LoadingOverlay.tsx","components/Loading.tsx","providers/DeviceProvider.tsx","utils/theme.ts","components/AirconKnob.tsx","components/CapacityDialog.tsx","components/PeopleCount.tsx","components/ToggleSwitch.tsx","pages/dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingContext","createContext","LoadingProvider","children","useState","loadingCount","setLoadingCount","Provider","value","useLoadingContext","useContext","LoadingOverlay","isLoading","useEffect","timeout","setTimeout","NProgress","start","clearTimeout","done","Loading","DeviceContext","apiUrl","process","DeviceProvider","loading","setLoading","client","useMemo","axios","create","baseURL","fetcher","useCallback","key","a","get","response","data","swrResponse","useSWR","mutate","updateDevice","callback","newData","changeId","Date","getTime","put","socket","io","transports","on","_","rawData","oldData","disconnect","device","useDeviceContext","theme","createTheme","palette","primary","main","RoundButton","styled","Button","AirconKnob","airconOn","airconTemp","offsetTempBy","offset","toggle","Card","CardContent","Typography","variant","Box","marginY","color","align","display","justifyContent","alignItems","onClick","disabled","paddingX","Fab","size","CapacityDialog","open","setOpen","newCapacity","setNewCapacity","capacity","handleChange","e","newValue","target","match","handleOpen","handleClose","cloneElement","style","cursor","Dialog","onClose","DialogTitle","onSubmit","preventDefault","parseInt","DialogContent","paddingTop","TextField","autoFocus","margin","label","fullWidth","onChange","DialogActions","type","PeopleBar","LinearProgress","PeopleCount","count","exceededMax","percentage","component","ToggleSwitch","applianceKey","currentStatus","toggleStatus","marginBottom","paddingBottom","flex","LightSwitches","DeviceDashboardPage","error","xs","sm","gridTemplateColumns","gap","marginTop","gridColumn","Providers","ThemeProvider","AppTitle","h1","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00696016.chunk.js","sourcesContent":["import {\n  createContext,\n  Dispatch,\n  PropsWithChildren,\n  SetStateAction,\n  useContext,\n  useState,\n} from 'react'\n\ninterface LoadingConstruct {\n  loadingCount: number\n  setLoadingCount: Dispatch<SetStateAction<number>>\n}\n\nconst LoadingContext = createContext<LoadingConstruct>(\n  null as unknown as LoadingConstruct\n)\n\nexport function LoadingProvider({ children }: PropsWithChildren<{}>) {\n  const [loadingCount, setLoadingCount] = useState(0)\n  return (\n    <LoadingContext.Provider value={{ loadingCount, setLoadingCount }}>\n      {children}\n    </LoadingContext.Provider>\n  )\n}\n\nexport function useLoadingContext() {\n  return useContext(LoadingContext)\n}\n","import { useEffect } from 'react'\nimport NProgress from 'nprogress'\nimport { useLoadingContext } from '../providers/LoadingProvider'\n\nimport '../nprogress.css'\n\nexport function LoadingOverlay() {\n  const { loadingCount } = useLoadingContext()\n  const isLoading = loadingCount > 0\n  useEffect(() => {\n    if (!isLoading) return\n    const timeout = setTimeout(() => NProgress.start(), 1000)\n    return () => {\n      clearTimeout(timeout)\n      NProgress.done()\n    }\n  }, [isLoading])\n  return null\n}\n","import { useEffect } from 'react'\nimport { useLoadingContext } from '../providers/LoadingProvider'\n\nexport function Loading() {\n  const { setLoadingCount } = useLoadingContext()\n  useEffect(() => {\n    setLoadingCount((loadingCount) => loadingCount + 1)\n    return () => setLoadingCount((loadingCount) => loadingCount - 1)\n  })\n  return null\n}\n","import axios from 'axios'\nimport {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport useSWR, { SWRConfig, SWRResponse } from 'swr'\nimport { DeviceStateDto } from '../types/netpie'\nimport { io } from 'socket.io-client'\nimport { Loading } from '../components/Loading'\n\nexport type UpdateData = Partial<DeviceStateDto>\nexport type UpdateCallback = (data: DeviceStateDto) => UpdateData\n\ninterface IDevice {\n  device: SWRResponse<DeviceStateDto, any>\n  updateDevice: (callback: UpdateCallback) => void\n}\n\nconst DeviceContext = createContext<IDevice>(null as unknown as IDevice)\n\ntype DeviceProviderProps = PropsWithChildren<{}>\n\nconst apiUrl = process.env.REACT_APP_API_URL as string\n\nexport function DeviceProvider({ children }: DeviceProviderProps) {\n  const [loading, setLoading] = useState(false)\n  const client = useMemo(() => {\n    return axios.create({\n      baseURL: apiUrl,\n    })\n  }, [])\n  const fetcher = useCallback(\n    async <T,>(key: string) => {\n      const response = await client.get<T>(key)\n      return response.data\n    },\n    [client]\n  )\n  const swrResponse = useSWR<DeviceStateDto>('/', { fetcher })\n  const { mutate } = swrResponse\n  const updateDevice = useCallback(\n    async (callback: UpdateCallback) => {\n      mutate((data) => {\n        if (typeof data === 'undefined') return\n        setLoading(true)\n        const newData = { ...callback(data), changeId: new Date().getTime() }\n        client.put('/updateDevice', newData)\n        return { ...data, ...newData } as DeviceStateDto\n      }, false)\n    },\n    [client, mutate]\n  )\n  useEffect(() => {\n    const socket = io(apiUrl, { transports: ['polling'] })\n    socket.on('message', (_, rawData) => {\n      const data = rawData as DeviceStateDto\n      mutate((oldData) => {\n        if (\n          oldData &&\n          data.changeId !== 0 &&\n          data.changeId < oldData.changeId\n        ) {\n          return oldData\n        }\n        setLoading(false)\n        return data\n      }, false)\n    })\n    return () => {\n      socket.disconnect()\n    }\n  }, [mutate])\n  return (\n    <DeviceContext.Provider value={{ device: swrResponse, updateDevice }}>\n      {loading ? <Loading /> : null}\n      <SWRConfig value={{ fetcher }}>{children}</SWRConfig>\n    </DeviceContext.Provider>\n  )\n}\n\nexport function useDeviceContext() {\n  return useContext(DeviceContext)\n}\n","import { createTheme } from '@material-ui/core'\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      main: '#388E3C',\n    },\n  },\n})\n","import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Fab,\n  Typography,\n} from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useCallback } from 'react'\nimport { useDeviceContext } from '../providers/DeviceProvider'\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew'\n\nconst RoundButton = styled(Button)`\n  height: 36px;\n  border-radius: 18px;\n`\n\nexport function AirconKnob() {\n  const {\n    device: { data },\n    updateDevice,\n  } = useDeviceContext()\n  const { airconOn, airconTemp } = data!\n  const offsetTempBy = (offset: number) => {\n    return () => {\n      updateDevice(({ airconTemp }) => ({ airconTemp: airconTemp + offset }))\n    }\n  }\n  const toggle = useCallback(() => {\n    updateDevice(({ airconOn }) => ({ airconOn: !airconOn }))\n  }, [updateDevice])\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">Air-Conditioner</Typography>\n        <Box marginY={1}>\n          <Typography variant=\"h3\" color=\"primary\" align=\"center\">\n            {airconOn ? <>{airconTemp}&deg;C</> : 'Off'}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <RoundButton\n            variant=\"outlined\"\n            onClick={offsetTempBy(-1)}\n            disabled={!airconOn}\n          >\n            -\n          </RoundButton>\n          <Box display=\"inline-block\" paddingX={2}>\n            <Fab onClick={toggle} color=\"primary\" size=\"medium\">\n              <PowerSettingsNewIcon />\n            </Fab>\n          </Box>\n          <RoundButton\n            variant=\"outlined\"\n            onClick={offsetTempBy(+1)}\n            disabled={!airconOn}\n          >\n            +\n          </RoundButton>\n        </Box>\n      </CardContent>\n    </Card>\n  )\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from '@material-ui/core'\nimport {\n  ChangeEvent,\n  cloneElement,\n  FormEvent,\n  ReactElement,\n  useCallback,\n  useState,\n} from 'react'\nimport { useDeviceContext } from '../providers/DeviceProvider'\n\nexport function CapacityDialog({ children }: { children: ReactElement }) {\n  const [open, setOpen] = useState(false)\n  const [newCapacity, setNewCapacity] = useState<string | null>(null)\n  const {\n    device: { data },\n    updateDevice,\n  } = useDeviceContext()\n  const { capacity } = data!\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    if (newValue.match(/^(?:\\d+|)$/)) {\n      setNewCapacity(newValue)\n    }\n  }, [])\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n  const handleClose = useCallback(() => {\n    setOpen(false)\n    setNewCapacity(null)\n  }, [])\n  const handleSave = (e: FormEvent) => {\n    e.preventDefault()\n    if (newCapacity !== null) {\n      updateDevice(() => ({ capacity: parseInt(newCapacity) }))\n    }\n    handleClose()\n  }\n\n  return (\n    <>\n      {cloneElement(children, {\n        onClick: handleOpen,\n        style: { cursor: 'pointer' },\n      })}\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Edit</DialogTitle>\n        <form onSubmit={handleSave}>\n          <DialogContent style={{ paddingTop: 0 }}>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Room capacity\"\n              fullWidth\n              variant=\"standard\"\n              value={newCapacity ?? capacity}\n              onChange={handleChange}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button type=\"submit\">Save</Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  )\n}\n","import {\n  Card,\n  CardContent,\n  LinearProgress,\n  Typography,\n} from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useDeviceContext } from '../providers/DeviceProvider'\nimport { CapacityDialog } from './CapacityDialog'\n\nconst PeopleBar = styled(LinearProgress)`\n  height: 16px;\n  border-radius: 8px;\n\n  span {\n    border-radius: 8px;\n  }\n`\n\nexport function PeopleCount() {\n  const {\n    device: { data },\n  } = useDeviceContext()\n  const { count, capacity } = data!\n  const exceededMax = count > capacity\n  const percentage = exceededMax ? 100 : (count / capacity) * 100\n  const color = exceededMax ? 'secondary' : 'primary'\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\">People Count</Typography>\n        <Typography variant=\"h3\" color={color}>\n          {count}\n          <CapacityDialog>\n            <Typography variant=\"h5\" component=\"span\">\n              /{capacity}\n            </Typography>\n          </CapacityDialog>\n        </Typography>\n        <PeopleBar variant=\"determinate\" value={percentage} color={color} />\n      </CardContent>\n    </Card>\n  )\n}\n","import { Box, Button, Card, CardContent, Typography } from '@material-ui/core'\nimport { useCallback } from 'react'\nimport { useDeviceContext } from '../providers/DeviceProvider'\nimport { DeviceStateDto } from '../types/netpie'\n\ntype BooleanProps<T> = {\n  [K in keyof T as T[K] extends boolean ? K : never]: boolean\n}\n\ninterface ToggleSwitchProps {\n  applianceKey: keyof BooleanProps<DeviceStateDto>\n  label: string\n}\n\nexport function ToggleSwitch({ applianceKey, label }: ToggleSwitchProps) {\n  const {\n    device: { data },\n    updateDevice,\n  } = useDeviceContext()\n  const currentStatus = data![applianceKey]\n  const toggleStatus = useCallback(() => {\n    updateDevice((oldData) => {\n      return {\n        [applianceKey]: !oldData[applianceKey],\n      }\n    })\n  }, [updateDevice, applianceKey])\n  return (\n    <Card style={{ marginBottom: 16 }}>\n      <CardContent style={{ paddingBottom: 16 }}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Typography variant=\"h6\">{label}</Typography>\n          <Box flex={1} />\n          <Button\n            onClick={toggleStatus}\n            variant={currentStatus ? 'contained' : 'text'}\n          >\n            {currentStatus ? 'On' : 'Off'}\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  )\n}\n","import { Box } from '@material-ui/core'\nimport { AirconKnob } from '../components/AirconKnob'\nimport { Loading } from '../components/Loading'\nimport { PeopleCount } from '../components/PeopleCount'\nimport { ToggleSwitch } from '../components/ToggleSwitch'\nimport { useDeviceContext } from '../providers/DeviceProvider'\n\nfunction LightSwitches() {\n  return (\n    <Box>\n      <ToggleSwitch applianceKey=\"light1\" label=\"Light 1\" />\n      <ToggleSwitch applianceKey=\"light2\" label=\"Light 2\" />\n      <ToggleSwitch applianceKey=\"light3\" label=\"Light 3\" />\n      <ToggleSwitch applianceKey=\"light4\" label=\"Light 4\" />\n      <ToggleSwitch applianceKey=\"light5\" label=\"Light 5\" />\n    </Box>\n  )\n}\n\nexport function DeviceDashboardPage() {\n  const {\n    device: { data, error },\n  } = useDeviceContext()\n  if (error) {\n    return <span>Error fetching device</span>\n  }\n  if (!data) {\n    return <Loading />\n  }\n  return (\n    <div>\n      <h2>Main Room</h2>\n      <PeopleCount />\n      <Box\n        display={{ xs: 'none', sm: 'grid' }}\n        gridTemplateColumns=\"repeat(12, 1fr)\"\n        gap={2}\n        marginTop={2}\n      >\n        <Box gridColumn=\"auto / span 6\">\n          <AirconKnob />\n        </Box>\n        <Box gridColumn=\"auto / span 6\">\n          <LightSwitches />\n        </Box>\n      </Box>\n      <Box display={{ xs: 'block', sm: 'none' }} marginTop={2}>\n        <LightSwitches />\n        <AirconKnob />\n      </Box>\n    </div>\n  )\n}\n","import { Container, ThemeProvider } from '@material-ui/core'\nimport { PropsWithChildren } from 'react'\nimport { LoadingOverlay } from './components/LoadingOverlay'\nimport { DeviceProvider } from './providers/DeviceProvider'\nimport { LoadingProvider } from './providers/LoadingProvider'\nimport { theme } from './utils/theme'\nimport styled from '@emotion/styled'\nimport { DeviceDashboardPage } from './pages/dashboard'\n\nfunction Providers({ children }: PropsWithChildren<{}>) {\n  return (\n    <ThemeProvider theme={theme}>\n      <LoadingProvider>\n        <DeviceProvider>{children}</DeviceProvider>\n      </LoadingProvider>\n    </ThemeProvider>\n  )\n}\n\nconst AppTitle = styled.h1`\n  text-align: center;\n`\n\nfunction App() {\n  return (\n    <Providers>\n      <Container maxWidth=\"md\">\n        <AppTitle>Distancing Counter</AppTitle>\n        <DeviceDashboardPage />\n        <LoadingOverlay />\n      </Container>\n    </Providers>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}